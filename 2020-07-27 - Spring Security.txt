2020-07-27 - Spring Security
https://www.youtube.com/watch?v=her_7pa0vrg
Spring Security | FULL COURSE

1. Basic authentication: Basic Auth
@Configuration
@EnableWebSecurity
public class ApplicationSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests().anyRequest().authenticated()
                .and()
                .httpBasic();
    }
}
Drawbacks:
- you cannot logout - because login and password is send by every single request.

2. Ant matchers
@Configuration
@EnableWebSecurity
public class ApplicationSecurityConfig extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .authorizeRequests()
                .antMatchers("/", "index", "/css/*", "/js/*")
                .permitAll()
                .anyRequest()
                .authenticated()
                .and()
                .httpBasic();
    }
}
Allows to access main html page like index.html (index.html can be a login page for instance)

3. Application Users
4. In memory user details manager
String... users <--- seria uzytkownikow, series of users
Collection<User> user <--- collection of users

@Configuration
@EnableWebSecurity
public class ApplicationSecurityConfig extends WebSecurityConfigurerAdapter {
{...}
    @Override
    @Bean
    protected UserDetailsService userDetailsService() {
        UserDetails annaSmithUser = User.builder()
                .username("annasmith")
                .password("password")
                .roles("STUDENT")   //ROLE_STUDENT
                .build();

        return new InMemoryUserDetailsManager(annaSmithUser);
    }
}

5. Password encoding with BCRYPT
@Configuration
public class PasswordConfig {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder(10);
    }
}

public class ApplicationSecurityConfig extends WebSecurityConfigurerAdapter {

	private final PasswordEncoder passwordEncoder;

    @Autowired
    public ApplicationSecurityConfig(PasswordEncoder passwordEncoder) {
        this.passwordEncoder = passwordEncoder;
    }

{...}

@Override
    @Bean
    protected UserDetailsService userDetailsService() {
        UserDetails annaSmithUser = User.builder()
                .username("annasmith")
                .password(passwordEncoder.encode("password"))  <-- password encoder is used here
                .roles("STUDENT")   //ROLE_STUDENT
                .build();

        return new InMemoryUserDetailsManager(annaSmithUser);
    }


6. Roles and permissions
7. Admin user
 UserDetails lindaAdmin = User.builder()
                .username("linda")
                .password(passwordEncoder.encode("password123"))
                .roles("ADMIN")
                .build();

8. Role Based Authentication
@Configuration
@EnableWebSecurity
public class ApplicationSecurityConfig extends WebSecurityConfigurerAdapter {
{...}

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
                .authorizeRequests()
                .antMatchers("/", "index", "/css/*", "/js/*") .permitAll()
                .antMatchers("/api/**").hasRole(STUDENT.name())	<-- ROLE based Authentication
                .anyRequest()
                .authenticated()
                .and()
                .httpBasic();
    }
}

9. Permission Based Authentication
10. Management API
11. Disabling CSRF
protected void configure(HttpSecurity http) throws Exception {
http
                .csrf().disable()
                {...}
}
    @PutMapping(path = "{studentId}")
    public void updateStudent(@PathVariable("studentId") Integer studentId, @RequestBody Student student) {
        {...}
    }
12. hasAuthority()
 http
                .csrf().disable()
                .authorizeRequests()
                .antMatchers("/", "index", "/css/*", "/js/*") .permitAll()
                .antMatchers("/api/**").hasRole(STUDENT.name())
                .antMatchers(HttpMethod.DELETE, "/management/api/**").hasAuthority(COURSE_WRITE.name())
                .antMatchers(HttpMethod.POST, "/management/api/**").hasAuthority(COURSE_WRITE.name())
                .antMatchers(HttpMethod.PUT, "/management/api/**").hasAuthority(COURSE_WRITE.name())
                .antMatchers(HttpMethod.GET, "/management/api/**").hasAnyRole(ADMIN.name(), ADMINTRAINEE.name())
                .anyRequest()
                .authenticated()
                .and()
                .httpBasic();

13. Adding Authorities to users
public enum ApplicationUserRole {
...

public Set<SimpleGrantedAuthority> getGrantedAuthorities() {
        Set<SimpleGrantedAuthority> permissions = getPermissions().stream()
                .map((p -> new SimpleGrantedAuthority(p.getPermission())))
                .collect(Collectors.toSet());
        permissions.add(new SimpleGrantedAuthority("ROLE_" + this.name()));
        return permissions;
}
...
14. Permission based authentication in action

15. Order does matter
Order of antMatchers does matter, because it analyse from top to bottom.

16. preAuthorize()
    @GetMapping
    @PreAuthorize("hasAnyRole('ROLE_ADMIN', 'ROLE_ADMINTRAINEE')")
    public List<Student> getAllStudents() {
        return STUDENTS;
    }

    @PostMapping
    @PreAuthorize("hasAuthority('student:write;)")
    public void registerNewStudent(@RequestBody Student student) {
        System.out.println(student);
    }
@EnableGlobalMethodSecurity(prePostEnabled = true)
public class ApplicationSecurityConfig extends WebSecurityConfigurerAdapter {
...
}

17. understanding csrf
csrf - Cross Site Request Forgery

18. CSRF - token

19. How CSRF token Generation works
http
    .csrf().csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())

20. Form Based Authentication
Basic Auth
- Authorization: Basic DSKJhdfkjgLKJNB134jklBhZA==
- HTTPS recommended
- Simple and Fast
- Can't logout

client                  server
    Get Request -->
    <-- 401 Unauthorized
Get Request | Base64 username:password -->
    <-- 200 ok

Form Based Authentication
- Username & Password
- Standard in most websites
- Forms (Full Control)
- Can logout
- HTTPS recommended

client                  server
POST username password -->
                                <-- validates credentials
<-- OK
<-- Cookie SESSIONID
Any request with SESSIONID
<-- 200 OK

21. Enable Form Based Authentication
Basic authentication - httpBasic() - jakies defaultowe okienko do logowania
formLogin() - enable Form Based Authentication - wlacza ladna strone do logowania

22. Session ID

23. Customize Login page
...
    .formLogin()
    .loginPage("/login");

24. Updating Login page
@Controller
@RequestMapping("/")
public class TemplateController {

    @GetMapping("login")
    public String getLogin() {
        return "login";
    }

2:17:18